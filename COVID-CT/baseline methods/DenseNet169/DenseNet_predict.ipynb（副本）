{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DenseNet_predict.ipynb（副本）","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO/Yqo1Cyqn4hC6mhrHMpN7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"w_lg-lzhjShD"},"source":["#!/usr/bin/env python\r\n","# coding: utf-8\r\n","!pip install torch"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-80yyVxMm5mx"},"source":["!pip install torchvision"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sqEh21FonCXX"},"source":["!pip install catalyst"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f2jPqcp_nMVC"},"source":["!pip install torchxrayvision"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"itLQ8Rp-mZHG"},"source":["import torch\r\n","import torchvision\r\n","import torchvision.transforms as transforms\r\n","import torchvision.datasets as datasets\r\n","import torch.nn.functional as F\r\n","import torch.nn as nn\r\n","import torch.optim as optim\r\n","from torch.utils.data import Dataset\r\n","import os\r\n","from PIL import Image\r\n","import matplotlib.pyplot as plt\r\n","from torch.optim.lr_scheduler import StepLR\r\n","import numpy as np\r\n","from PIL import ImageFile\r\n","from torch.utils.tensorboard import SummaryWriter\r\n","from datetime import datetime\r\n","import numpy as np\r\n","import pandas as pd\r\n","import os\r\n","import random \r\n","from shutil import copyfile\r\n","from torch.utils.data import Dataset\r\n","from torchvision.datasets import ImageFolder\r\n","from PIL import Image\r\n","from torch.utils.data import DataLoader\r\n","from torch.utils.data import Dataset\r\n","import re\r\n","import albumentations as albu\r\n","from albumentations.pytorch import ToTensor\r\n","from catalyst.data import Augmentor\r\n","import torchxrayvision as xrv"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gSC12-ENmU5S"},"source":["import torch\r\n","import torchvision\r\n","from torchvision import transforms, utils\r\n","from torch.utils.data import Dataset, DataLoader\r\n","import matplotlib.pyplot as plt\r\n","import torch.optim as optim\r\n","from torch.utils.data import Dataset\r\n","import os\r\n","from PIL import Image\r\n","import matplotlib.pyplot as plt\r\n","from torch.optim.lr_scheduler import StepLR\r\n","from PIL import Image\r\n","import torch.nn.functional as F\r\n","import torch.nn as nn\r\n","import numpy as np\r\n","from sklearn.metrics import roc_auc_score\r\n","import re\r\n","import albumentations as albu\r\n","from albumentations.pytorch import ToTensor\r\n","from catalyst.data import Augmentor\r\n","from skimage.io import imread, imsave\r\n","import skimage"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k0LAyUNEmSK6"},"source":["torch.cuda.empty_cache()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3MEJ4EUrmPqC"},"source":["get_ipython().system('pip install --upgrade efficientnet-pytorch')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eNqlFkHdjwcb"},"source":["normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\r\n","train_transformer = transforms.Compose([\r\n","    transforms.Resize(256),\r\n","    transforms.RandomResizedCrop((224),scale=(0.5,1.0)),\r\n","    transforms.RandomHorizontalFlip(),\r\n","    transforms.ToTensor(),\r\n","    normalize\r\n","])\r\n","\r\n","val_transformer = transforms.Compose([\r\n","    transforms.Resize(224),\r\n","    transforms.CenterCrop(224),\r\n","    transforms.ToTensor(),\r\n","    normalize\r\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4OqyTGOZpaBu","executionInfo":{"status":"ok","timestamp":1608610410615,"user_tz":-480,"elapsed":66624,"user":{"displayName":"王志远","photoUrl":"","userId":"13982724214817983181"}},"outputId":"c68df2ad-8e25-4367-d1d4-3a99bf186c46"},"source":["## authorize access to google drive\r\n","from google.colab import drive\r\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RrEqvpR5pdtb","executionInfo":{"status":"ok","timestamp":1608610524250,"user_tz":-480,"elapsed":1696,"user":{"displayName":"王志远","photoUrl":"","userId":"13982724214817983181"}},"outputId":"b2f17497-276b-4607-dd32-dc289f203662"},"source":["# navigate to project directory\r\n","%cd '/content/drive/My Drive/Colab Notebooks/COVID-CT-master'"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/COVID-CT-master\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ot9cvGLmLdm","executionInfo":{"status":"ok","timestamp":1608611832102,"user_tz":-480,"elapsed":1008,"user":{"displayName":"王志远","photoUrl":"","userId":"13982724214817983181"}},"outputId":"90a25e1c-4453-45f9-fd09-41038c02f65b"},"source":["batchsize=10\r\n","def read_txt(txt_path):\r\n","    with open(txt_path) as f:\r\n","        lines = f.readlines()\r\n","    txt_data = [line.strip() for line in lines]\r\n","    return txt_data\r\n","\r\n","class CovidCTDataset(Dataset):\r\n","    def __init__(self, root_dir, txt_COVID, txt_NonCOVID, transform=None):\r\n","        \"\"\"\r\n","        Args:\r\n","            txt_path (string): Path to the txt file with annotations.\r\n","            root_dir (string): Directory with all the images.\r\n","            transform (callable, optional): Optional transform to be applied\r\n","                on a sample.\r\n","        File structure:\r\n","        - root_dir\r\n","            - CT_COVID\r\n","                - img1.png\r\n","                - img2.png\r\n","                - ......\r\n","            - CT_NonCOVID\r\n","                - img1.png\r\n","                - img2.png\r\n","                - ......\r\n","        \"\"\"\r\n","        self.root_dir = root_dir\r\n","        self.txt_path = [txt_COVID,txt_NonCOVID]\r\n","        self.classes = ['CT_COVID', 'CT_NonCOVID']\r\n","        self.num_cls = len(self.classes)\r\n","        self.img_list = []\r\n","        for c in range(self.num_cls):\r\n","            cls_list = [[os.path.join(self.root_dir,self.classes[c],item), c] for item in read_txt(self.txt_path[c])]\r\n","            self.img_list += cls_list\r\n","        self.transform = transform\r\n","\r\n","    def __len__(self):\r\n","        return len(self.img_list)\r\n","\r\n","    def __getitem__(self, idx):\r\n","        if torch.is_tensor(idx):\r\n","            idx = idx.tolist()\r\n","\r\n","        img_path = self.img_list[idx][0]\r\n","        image = Image.open(img_path).convert('RGB')\r\n","\r\n","        if self.transform:\r\n","            image = self.transform(image)\r\n","        sample = {'img': image,\r\n","                  'label': int(self.img_list[idx][1])}\r\n","        return sample\r\n","\r\n","\r\n","\r\n","    \r\n","if __name__ == '__main__':\r\n","    trainset = CovidCTDataset(root_dir='./Images-processed',\r\n","                              txt_COVID='./Data-split/COVID/trainCT_COVID.txt',\r\n","                              txt_NonCOVID='./Data-split/NonCOVID/trainCT_NonCOVID.txt',\r\n","                              transform= train_transformer)\r\n","    valset = CovidCTDataset(root_dir='./Images-processed',\r\n","                              txt_COVID='./Data-split/COVID/valCT_COVID.txt',\r\n","                              txt_NonCOVID='./Data-split/NonCOVID/valCT_NonCOVID.txt',\r\n","                              transform= val_transformer)\r\n","    testset = CovidCTDataset(root_dir='./Images-processed',\r\n","                              txt_COVID='./Data-split/COVID/testCT_COVID.txt',\r\n","                              txt_NonCOVID='./Data-split/NonCOVID/testCT_NonCOVID.txt',\r\n","                              transform= val_transformer)\r\n","    print(trainset.__len__())\r\n","    print(valset.__len__())\r\n","    print(testset.__len__())\r\n","\r\n","    train_loader = DataLoader(trainset, batch_size=batchsize, drop_last=False, shuffle=True)\r\n","    val_loader = DataLoader(valset, batch_size=batchsize, drop_last=False, shuffle=False)\r\n","    test_loader = DataLoader(testset, batch_size=batchsize, drop_last=False, shuffle=False)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["425\n","118\n","203\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N_w8P9rkmH_R"},"source":["# for batch_index, batch_samples in enumerate(train_dataloader):      \r\n","#         data, target = batch_samples[0], batch_samples[1]\r\n","# skimage.io.imshow(data[0,1,:,:].numpy())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DUnlblnAmF31"},"source":["alpha = None\r\n","device = 'cuda'\r\n","def train(optimizer, epoch):\r\n","    \r\n","    model.train()\r\n","    \r\n","    train_loss = 0\r\n","    train_correct = 0\r\n","    \r\n","    for batch_index, batch_samples in enumerate(train_loader):\r\n","        \r\n","        # move data to device\r\n","        data, target = batch_samples['img'].to(device), batch_samples['label'].to(device)\r\n","#        data = data[:, 0, :, :]\r\n","#        data = data[:, None, :, :]\r\n","#         data, targets_a, targets_b, lam = mixup_data(data, target.long(), alpha, use_cuda=True)\r\n","        \r\n","        \r\n","        optimizer.zero_grad()\r\n","        output = model(data)\r\n","        \r\n","        criteria = nn.CrossEntropyLoss()\r\n","        loss = criteria(output, target.long())\r\n","#         loss = mixup_criterion(criteria, output, targets_a, targets_b, lam)\r\n","        train_loss += criteria(output, target.long())\r\n","        \r\n","        optimizer.zero_grad()\r\n","        loss.backward()\r\n","        optimizer.step()\r\n","        \r\n","        pred = output.argmax(dim=1, keepdim=True)\r\n","        train_correct += pred.eq(target.long().view_as(pred)).sum().item()\r\n","    \r\n","        # Display progress and write to tensorboard\r\n","        if batch_index % bs == 0:\r\n","            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tTrain Loss: {:.6f}'.format(\r\n","                epoch, batch_index, len(train_loader),\r\n","                100.0 * batch_index / len(train_loader), loss.item()/ bs))\r\n","    \r\n","    print('\\nTrain set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'.format(\r\n","        train_loss/len(train_loader.dataset), train_correct, len(train_loader.dataset),\r\n","        100.0 * train_correct / len(train_loader.dataset)))\r\n","    f = open('model_result/{}.txt'.format(modelname), 'a+')\r\n","    f.write('\\nTrain set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'.format(\r\n","        train_loss/len(train_loader.dataset), train_correct, len(train_loader.dataset),\r\n","        100.0 * train_correct / len(train_loader.dataset)))\r\n","    f.write('\\n')\r\n","    f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hzqC4wbNmBoX"},"source":["def val(epoch):\r\n","    \r\n","    model.eval()\r\n","    test_loss = 0\r\n","    correct = 0\r\n","    results = []\r\n","    \r\n","    TP = 0\r\n","    TN = 0\r\n","    FN = 0\r\n","    FP = 0\r\n","    \r\n","    \r\n","    criteria = nn.CrossEntropyLoss()\r\n","    # Don't update model\r\n","    with torch.no_grad():\r\n","        tpr_list = []\r\n","        fpr_list = []\r\n","        \r\n","        predlist=[]\r\n","        scorelist=[]\r\n","        targetlist=[]\r\n","        # Predict\r\n","        for batch_index, batch_samples in enumerate(val_loader):\r\n","            data, target = batch_samples['img'].to(device), batch_samples['label'].to(device)\r\n","#            data = data[:, 0, :, :]\r\n","#            data = data[:, None, :, :]\r\n","            output = model(data)\r\n","            \r\n","            test_loss += criteria(output, target.long())\r\n","            score = F.softmax(output, dim=1)\r\n","            pred = output.argmax(dim=1, keepdim=True)\r\n","#             print('target',target.long()[:, 2].view_as(pred))\r\n","            correct += pred.eq(target.long().view_as(pred)).sum().item()\r\n","            \r\n","#             print(output[:,1].cpu().numpy())\r\n","#             print((output[:,1]+output[:,0]).cpu().numpy())\r\n","#             predcpu=(output[:,1].cpu().numpy())/((output[:,1]+output[:,0]).cpu().numpy())\r\n","            targetcpu=target.long().cpu().numpy()\r\n","            predlist=np.append(predlist, pred.cpu().numpy())\r\n","            scorelist=np.append(scorelist, score.cpu().numpy()[:,1])\r\n","            targetlist=np.append(targetlist,targetcpu)\r\n","           \r\n","          \r\n","    return targetlist, scorelist, predlist"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KJ7ugsvRl-tJ"},"source":["def test(epoch):\r\n","    \r\n","    model.eval()\r\n","    test_loss = 0\r\n","    correct = 0\r\n","    results = []\r\n","    \r\n","    TP = 0\r\n","    TN = 0\r\n","    FN = 0\r\n","    FP = 0\r\n","    \r\n","    \r\n","    criteria = nn.CrossEntropyLoss()\r\n","    # Don't update model\r\n","    with torch.no_grad():\r\n","        tpr_list = []\r\n","        fpr_list = []\r\n","        \r\n","        predlist=[]\r\n","        scorelist=[]\r\n","        targetlist=[]\r\n","        # Predict\r\n","        for batch_index, batch_samples in enumerate(test_loader):\r\n","            data, target = batch_samples['img'].to(device), batch_samples['label'].to(device)\r\n","#            data = data[:, 0, :, :]\r\n","#            data = data[:, None, :, :]\r\n","#             print(target)\r\n","            output = model(data)\r\n","            \r\n","            test_loss += criteria(output, target.long())\r\n","            score = F.softmax(output, dim=1)\r\n","            pred = output.argmax(dim=1, keepdim=True)\r\n","#             print('target',target.long()[:, 2].view_as(pred))\r\n","            correct += pred.eq(target.long().view_as(pred)).sum().item()\r\n","#             TP += ((pred == 1) & (target.long()[:, 2].view_as(pred).data == 1)).cpu().sum()\r\n","#             TN += ((pred == 0) & (target.long()[:, 2].view_as(pred) == 0)).cpu().sum()\r\n","# #             # FN    predict 0 label 1\r\n","#             FN += ((pred == 0) & (target.long()[:, 2].view_as(pred) == 1)).cpu().sum()\r\n","# #             # FP    predict 1 label 0\r\n","#             FP += ((pred == 1) & (target.long()[:, 2].view_as(pred) == 0)).cpu().sum()\r\n","#             print(TP,TN,FN,FP)\r\n","            \r\n","            \r\n","#             print(output[:,1].cpu().numpy())\r\n","#             print((output[:,1]+output[:,0]).cpu().numpy())\r\n","#             predcpu=(output[:,1].cpu().numpy())/((output[:,1]+output[:,0]).cpu().numpy())\r\n","            targetcpu=target.long().cpu().numpy()\r\n","            predlist=np.append(predlist, pred.cpu().numpy())\r\n","            scorelist=np.append(scorelist, score.cpu().numpy()[:,1])\r\n","            targetlist=np.append(targetlist,targetcpu)\r\n","           \r\n","    return targetlist, scorelist, predlist\r\n","    \r\n","    # Write to tensorboard\r\n","#     writer.add_scalar('Test Accuracy', 100.0 * correct / len(test_loader.dataset), epoch)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0CArGfSrl7VI"},"source":["# %CheXNet pretrain\r\n","# class DenseNet121(nn.Module):\r\n","#     \"\"\"Model modified.\r\n","\r\n","#     The architecture of our model is the same as standard DenseNet121\r\n","#     except the classifier layer which has an additional sigmoid function.\r\n","\r\n","#     \"\"\"\r\n","#     def __init__(self, out_size):\r\n","#         super(DenseNet121, self).__init__()\r\n","#         self.densenet121 = torchvision.models.densenet121(pretrained=True)\r\n","#         num_ftrs = self.densenet121.classifier.in_features\r\n","#         self.densenet121.classifier = nn.Sequential(\r\n","#             nn.Linear(num_ftrs, out_size),\r\n","#             nn.Sigmoid()\r\n","#         )\r\n","\r\n","#     def forward(self, x):\r\n","#         x = self.densenet121(x)\r\n","#         return x\r\n","  \r\n","\r\n","# device = 'cuda'\r\n","# CKPT_PATH = 'model.pth.tar'\r\n","# N_CLASSES = 14\r\n","\r\n","# DenseNet121 = DenseNet121(N_CLASSES).cuda()\r\n","\r\n","# CKPT_PATH = './CheXNet/model.pth.tar'\r\n","\r\n","# if os.path.isfile(CKPT_PATH):\r\n","#     checkpoint = torch.load(CKPT_PATH)        \r\n","#     state_dict = checkpoint['state_dict']\r\n","#     remove_data_parallel = False\r\n","\r\n","\r\n","#     pattern = re.compile(\r\n","#         r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$')\r\n","#     for key in list(state_dict.keys()):\r\n","#         match = pattern.match(key)\r\n","#         new_key = match.group(1) + match.group(2) if match else key\r\n","#         new_key = new_key[7:] if remove_data_parallel else new_key\r\n","#         new_key = new_key[7:]\r\n","#         state_dict[new_key] = state_dict[key]\r\n","#         del state_dict[key]\r\n","\r\n","\r\n","#     DenseNet121.load_state_dict(checkpoint['state_dict'])\r\n","#     print(\"=> loaded checkpoint\")\r\n","# #     print(densenet121)\r\n","# else:\r\n","#     print(\"=> no checkpoint found\")\r\n","\r\n","# # for parma in DenseNet121.parameters():\r\n","# #         parma.requires_grad = False\r\n","# DenseNet121.densenet121.classifier._modules['0'] = nn.Linear(in_features=1024, out_features=2, bias=True)\r\n","# DenseNet121.densenet121.features.conv0 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\r\n","# # print(DenseNet121)\r\n","# model = DenseNet121.to(device)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iuhSt4yxlws6"},"source":["### DenseNet\r\n","class DenseNetModel(nn.Module):\r\n","\r\n","    def __init__(self):\r\n","        \"\"\"\r\n","        Pass in parsed HyperOptArgumentParser to the model\r\n","        :param hparams:\r\n","        \"\"\"\r\n","        super(DenseNetModel, self).__init__()\r\n","\r\n","        self.dense_net = xrv.models.DenseNet(num_classes=2)\r\n","        self.criterion = nn.CrossEntropyLoss()\r\n","\r\n","    def forward(self, x):\r\n","        logits = self.dense_net(x)\r\n","        return logits\r\n","    \r\n","model = DenseNetModel().cuda()\r\n","modelname = 'DenseNet_medical'\r\n","# print(model)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j0DWDSoJlu2L"},"source":["### SimpleCNN\r\n","class SimpleCNN(torch.nn.Module):\r\n","    def __init__(self):\r\n","        super(SimpleCNN, self).__init__() # b, 3, 32, 32\r\n","        layer1 = torch.nn.Sequential() \r\n","        layer1.add_module('conv1', torch.nn.Conv2d(3, 32, 3, 1, padding=1))\r\n"," \r\n","        #b, 32, 32, 32\r\n","        layer1.add_module('relu1', torch.nn.ReLU(True)) \r\n","        layer1.add_module('pool1', torch.nn.MaxPool2d(2, 2)) # b, 32, 16, 16 //池化为16*16\r\n","        self.layer1 = layer1\r\n","        layer4 = torch.nn.Sequential()\r\n","        layer4.add_module('fc1', torch.nn.Linear(401408, 2))       \r\n","        self.layer4 = layer4\r\n"," \r\n","    def forward(self, x):\r\n","        conv1 = self.layer1(x)\r\n","        fc_input = conv1.view(conv1.size(0), -1)\r\n","        fc_out = self.layer4(fc_input)\r\n"," \r\n","model = SimpleCNN().cuda()\r\n","modelname = 'SimpleCNN'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KAK46DcIlr-c"},"source":["### ResNet18\r\n","import torchvision.models as models\r\n","model = models.resnet18(pretrained=True).cuda()\r\n","modelname = 'ResNet18'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aArLlrCilouR"},"source":["### Dense121\r\n","import torchvision.models as models\r\n","model = models.densenet121(pretrained=True).cuda()\r\n","modelname = 'Dense121'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i3_9mqAflgcE"},"source":["### Dense169\r\n","import torchvision.models as models\r\n","model = models.densenet169(pretrained=True).cuda()\r\n","modelname = 'Dense169'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uSQHKQ7lldy6"},"source":["### ResNet50\r\n","import torchvision.models as models\r\n","model = models.resnet50(pretrained=True).cuda()\r\n","modelname = 'ResNet50'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xsjS7cWelaBu"},"source":["### VGGNet\r\n","import torchvision.models as models\r\n","model = models.vgg16(pretrained=True)\r\n","model = model.cuda()\r\n","modelname = 'vgg16'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YKRAAkWWlXBw","executionInfo":{"status":"ok","timestamp":1608611836030,"user_tz":-480,"elapsed":4881,"user":{"displayName":"王志远","photoUrl":"","userId":"13982724214817983181"}},"outputId":"89dcc2c0-a005-41bb-8e55-79bcef0d5b7b"},"source":["### efficientNet\r\n","from efficientnet_pytorch import EfficientNet\r\n","model = EfficientNet.from_pretrained('efficientnet-b0', num_classes=2)\r\n","model = model.cuda()\r\n","modelname = 'efficientNet-b0'\r\n","\r\n","\r\n","# model = EfficientNet.from_name('efficientnet-b1').cuda()\r\n","# modelname = 'efficientNet_random'"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Loaded pretrained weights for efficientnet-b0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U5t0JA5hlOlo"},"source":["# train\r\n","bs = 10\r\n","votenum = 10\r\n","import warnings\r\n","warnings.filterwarnings('ignore')\r\n","\r\n","r_list = []\r\n","p_list = []\r\n","acc_list = []\r\n","AUC_list = []\r\n","# TP = 0\r\n","# TN = 0\r\n","# FN = 0\r\n","# FP = 0\r\n","vote_pred = np.zeros(valset.__len__())\r\n","vote_score = np.zeros(valset.__len__())\r\n","\r\n","#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum = 0.9)\r\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\r\n","scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=10)\r\n","#scheduler = StepLR(optimizer, step_size=1)\r\n","\r\n","total_epoch = 3000\r\n","for epoch in range(1, total_epoch+1):\r\n","    train(optimizer, epoch)\r\n","    \r\n","    targetlist, scorelist, predlist = val(epoch)\r\n","    print('target',targetlist)\r\n","    print('score',scorelist)\r\n","    print('predict',predlist)\r\n","    vote_pred = vote_pred + predlist \r\n","    vote_score = vote_score + scorelist \r\n","\r\n","    if epoch % votenum == 0:\r\n","        \r\n","        # major vote\r\n","        vote_pred[vote_pred <= (votenum/2)] = 0\r\n","        vote_pred[vote_pred > (votenum/2)] = 1\r\n","        vote_score = vote_score/votenum\r\n","        \r\n","        print('vote_pred', vote_pred)\r\n","        print('targetlist', targetlist)\r\n","        TP = ((vote_pred == 1) & (targetlist == 1)).sum()\r\n","        TN = ((vote_pred == 0) & (targetlist == 0)).sum()\r\n","        FN = ((vote_pred == 0) & (targetlist == 1)).sum()\r\n","        FP = ((vote_pred == 1) & (targetlist == 0)).sum()\r\n","        \r\n","        \r\n","        print('TP=',TP,'TN=',TN,'FN=',FN,'FP=',FP)\r\n","        print('TP+FP',TP+FP)\r\n","        p = TP / (TP + FP)\r\n","        print('precision',p)\r\n","        p = TP / (TP + FP)\r\n","        r = TP / (TP + FN)\r\n","        print('recall',r)\r\n","        F1 = 2 * r * p / (r + p)\r\n","        acc = (TP + TN) / (TP + TN + FP + FN)\r\n","        print('F1',F1)\r\n","        print('acc',acc)\r\n","        AUC = roc_auc_score(targetlist, vote_score)\r\n","        print('AUCp', roc_auc_score(targetlist, vote_pred))\r\n","        print('AUC', AUC)\r\n","        \r\n","        \r\n","        \r\n","#         if epoch == total_epoch:\r\n","        torch.save(model.state_dict(), \"model_backup/{}.pt\".format(modelname))  \r\n","        \r\n","        vote_pred = np.zeros(valset.__len__())\r\n","        vote_score = np.zeros(valset.__len__())\r\n","        print('\\n The epoch is {}, average recall: {:.4f}, average precision: {:.4f},average F1: {:.4f}, average accuracy: {:.4f}, average AUC: {:.4f}'.format(\r\n","        epoch, r, p, F1, acc, AUC))\r\n","\r\n","        f = open('model_result/{}.txt'.format(modelname), 'a+')\r\n","        f.write('\\n The epoch is {}, average recall: {:.4f}, average precision: {:.4f},average F1: {:.4f}, average accuracy: {:.4f}, average AUC: {:.4f}'.format(\r\n","        epoch, r, p, F1, acc, AUC))\r\n","        f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Un75oOD6lKMX"},"source":["\r\n","\r\n","# test\r\n","bs = 10\r\n","import warnings\r\n","warnings.filterwarnings('ignore')\r\n","\r\n","r_list = []\r\n","p_list = []\r\n","acc_list = []\r\n","AUC_list = []\r\n","# TP = 0\r\n","# TN = 0\r\n","# FN = 0\r\n","# FP = 0\r\n","vote_pred = np.zeros(testset.__len__())\r\n","vote_score = np.zeros(testset.__len__())\r\n","\r\n","#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum = 0.9)\r\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\r\n","scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=10)\r\n","scheduler = StepLR(optimizer, step_size=1)\r\n","\r\n","total_epoch = 10\r\n","for epoch in range(1, total_epoch+1):\r\n","    \r\n","    targetlist, scorelist, predlist = test(epoch)\r\n","#     print('target',targetlist)\r\n","#     print('score',scorelist)\r\n","#     print('predict',predlist)\r\n","    vote_pred = vote_pred + predlist \r\n","    vote_score = vote_score + scorelist \r\n","    \r\n","    TP = ((predlist == 1) & (targetlist == 1)).sum()\r\n","    TN = ((predlist == 0) & (targetlist == 0)).sum()\r\n","    FN = ((predlist == 0) & (targetlist == 1)).sum()\r\n","    FP = ((predlist == 1) & (targetlist == 0)).sum()\r\n","\r\n","    print('TP=',TP,'TN=',TN,'FN=',FN,'FP=',FP)\r\n","    print('TP+FP',TP+FP)\r\n","    p = TP / (TP + FP)\r\n","    print('precision',p)\r\n","    p = TP / (TP + FP)\r\n","    r = TP / (TP + FN)\r\n","    print('recall',r)\r\n","    F1 = 2 * r * p / (r + p)\r\n","    acc = (TP + TN) / (TP + TN + FP + FN)\r\n","    print('F1',F1)\r\n","    print('acc',acc)\r\n","    AUC = roc_auc_score(targetlist, vote_score)\r\n","    print('AUC', AUC)\r\n","\r\n","    if epoch % votenum == 0:\r\n","        \r\n","        # major vote\r\n","        vote_pred[vote_pred <= (votenum/2)] = 0\r\n","        vote_pred[vote_pred > (votenum/2)] = 1\r\n","        \r\n","#         print('vote_pred', vote_pred)\r\n","#         print('targetlist', targetlist)\r\n","        TP = ((vote_pred == 1) & (targetlist == 1)).sum()\r\n","        TN = ((vote_pred == 0) & (targetlist == 0)).sum()\r\n","        FN = ((vote_pred == 0) & (targetlist == 1)).sum()\r\n","        FP = ((vote_pred == 1) & (targetlist == 0)).sum()\r\n","        \r\n","        print('TP=',TP,'TN=',TN,'FN=',FN,'FP=',FP)\r\n","        print('TP+FP',TP+FP)\r\n","        p = TP / (TP + FP)\r\n","        print('precision',p)\r\n","        p = TP / (TP + FP)\r\n","        r = TP / (TP + FN)\r\n","        print('recall',r)\r\n","        F1 = 2 * r * p / (r + p)\r\n","        acc = (TP + TN) / (TP + TN + FP + FN)\r\n","        print('F1',F1)\r\n","        print('acc',acc)\r\n","        AUC = roc_auc_score(targetlist, vote_score)\r\n","        print('AUC', AUC)\r\n","        \r\n","        \r\n","#         f = open('model_result/{modelname}.txt', 'a+')\r\n","#         f.write('precision, recall, F1, acc= \\n')\r\n","#         f.writelines(str(p))\r\n","#         f.writelines('\\n')\r\n","#         f.writelines(str(r))\r\n","#         f.writelines('\\n')\r\n","#         f.writelines(str(F1))\r\n","#         f.writelines('\\n')\r\n","#         f.writelines(str(acc))\r\n","#         f.writelines('\\n')\r\n","#         f.close()\r\n","        \r\n","        \r\n","        vote_pred = np.zeros((1,testset.__len__()))\r\n","        vote_score = np.zeros(testset.__len__())\r\n","        print('vote_pred',vote_pred)\r\n","        print('\\n The epoch is {}, average recall: {:.4f}, average precision: {:.4f},average F1: {:.4f}, average accuracy: {:.4f}, average AUC: {:.4f}'.format(\r\n","        epoch, r, p, F1, acc, AUC))\r\n","\r\n","        f = open(f'model_result/test_{modelname}.txt', 'a+')\r\n","        f.write('\\n The epoch is {}, average recall: {:.4f}, average precision: {:.4f},average F1: {:.4f}, average accuracy: {:.4f}, average AUC: {:.4f}'.format(\r\n","        epoch, r, p, F1, acc, AUC))\r\n","        f.close()"],"execution_count":null,"outputs":[]}]}